# coding: UTF-8
  
module MikutterAdventure
  @ダンジョン =
  [
    [ :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁 ],
    [ :壁, :始, :壁, :＿, :＿, :＿, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :＿, :壁 ],
    [ :壁, :＿, :壁, :＿, :壁, :＿, :＿, :＿, :壁, :壁, :壁, :壁, :壁, :＿, :＿, :＿, :壁, :終, :＿, :壁 ],
    [ :壁, :＿, :壁, :＿, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :＿, :壁, :壁, :壁, :壁, :＿, :壁 ],
    [ :壁, :e5, :＿, :＿, :＿, :回, :＿, :＿, :壁, :壁, :＿, :＿, :＿, :＿, :壁, :＿, :＿, :＿, :＿, :壁 ],
    [ :壁, :＿, :壁, :＿, :壁, :＿, :壁, :壁, :＿, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :＿, :壁 ],
    [ :壁, :＿, :壁, :＿, :壁, :＿, :壁, :壁, :＿, :毒, :＿, :壁, :壁, :＿, :＿, :＿, :壁, :＿, :回, :壁 ],
    [ :壁, :コ, :壁, :＿, :壁, :＿, :壁, :壁, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :＿, :壁, :壁, :＿, :壁 ],
    [ :壁, :＿, :壁, :壁, :e1, :＿, :壁, :＿, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :＿, :＿, :＿, :e3, :壁 ],
    [ :壁, :＿, :壁, :壁, :＿, :壁, :壁, :＿, :＿, :＿, :＿, :e2, :毒, :毒, :＿, :＿, :壁, :壁, :＿, :壁 ],
    [ :壁, :＿, :壁, :壁, :＿, :壁, :壁, :＿, :壁, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :＿, :壁 ],
    [ :壁, :＿, :壁, :＿, :＿, :＿, :＿, :＿, :壁, :壁, :＿, :＿, :＿, :壁, :壁, :壁, :壁, :壁, :＿, :壁 ],
    [ :壁, :＿, :壁, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :＿, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :回, :壁 ],
    [ :壁, :壁, :壁, :壁, :＿, :壁, :壁, :壁, :壁, :＿, :＿, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :回, :壁 ],
    [ :壁, :＿, :＿, :＿, :＿, :壁, :壁, :＿, :＿, :＿, :壁, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :＿, :壁 ],
    [ :壁, :壁, :壁, :壁, :壁, :壁, :壁, :＿, :壁, :壁, :＿, :＿, :＿, :壁, :Ｇ, :壁, :毒, :毒, :＿, :壁 ],
    [ :壁, :＿, :壁, :＿, :壁, :宝, :＿, :回, :＿, :壁, :＿, :壁, :＿, :＿, :＿, :壁, :毒, :壁, :＿, :壁 ],
    [ :壁, :毒, :毒, :毒, :壁, :壁, :壁, :＿, :壁, :＿, :＿, :壁, :壁, :壁, :壁, :壁, :毒, :壁, :毒, :壁 ],
    [ :壁, :壁, :壁, :＿, :＿, :＿, :＿, :＿, :壁, :＿, :壁, :壁, :壁, :壁, :壁, :壁, :毒, :毒, :毒, :壁 ],
    [ :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁, :壁 ],
  ]
  

  # 道情報 
  RouteType = Struct.new(:種別, :直進可, :メッセージ)
  WalkAchievements = Struct.new(:count, :achievement)

  # 道
  @十字路 = RouteType.new(
    :十字路, 
    true, 
    "十字路だね。どの道にしようか？")
  
  @T字路左 = RouteType.new(
    :T路路左,
    true,
    "左側にも道があるね。どうする？")
  
  @T字路右 = RouteType.new(
    :T路路右,
    true,
    "マスター！マスター！右側にも道を見つけたよ♪")
  
  @一本道 = RouteType.new(
    :一本道,
    true,
    "一本道だね。ごーごー♪")
  
  @T字路 = RouteType.new(
    :T字路,
    false,
    "右と左に道があるね。運命の分かれ道〜")
  
  @曲がり角左 = RouteType.new(
    :曲がり角左,
    false,
    "曲がり角だね。左に道があるよ。")
  
  @曲がり角右 = RouteType.new(
    :曲がり角右,
    false,
    "突き当たり〜。右に道があるよ。")
  
  @行き止まり = RouteType.new(
    :行き止まり,
    false,
    "ありゃりゃ。行き止まりだ。戻ろうマスター。")
  
  
  def self.道情報(x, y, 向き)
    # 辺りの風景を取得
    風景 = 辺りの風景(x, y, 向き)
  
    前方 = !壁?(風景[:前方]) 
    左 = !壁?(風景[:左])
    右 = !壁?(風景[:右])
  
    道 = if 前方 && 左 && 右
      @十字路
    elsif 前方 && 左 && !右
      @T字路左
    elsif 前方 && !左 && 右
      @T字路右
    elsif 前方 && !左 && !右
      @一本道
    elsif !前方 && 左 && 右
      @T字路
    elsif !前方 && 左 && !右
      @曲がり角左
    elsif !前方 && !左 && 右
      @曲がり角右
    elsif !前方 && !左 && !右
      @行き止まり
    end
  
    道
  end
 
 

  # 方向ごとに視界の相対座標を定義
  @辺り = {
    :西 => { :前方 => { :x => -1, :y => 0 }, :左 => { :x => 0, :y => 1 }, :右 => { :x => 0, :y => -1 } },
    :東 => { :前方 => { :x => 1, :y => 0 }, :左 => { :x => 0, :y => -1 }, :右 => { :x => 0, :y => 1 } },
    :北 => { :前方 => { :x => 0, :y => -1 }, :左 => { :x => -1, :y => 0 }, :右 => { :x => 1, :y => 0 } },
    :南 => { :前方 => { :x => 0, :y => 1 }, :左 => { :x => 1, :y => 0 }, :右 => { :x => -1, :y => 0 } },
  }
  
   
  # 辺りの風景を返す
  def self.辺りの風景(x, y, 向き)
    result = {}
    pos = @辺り[向き]
    [ :前方, :左, :右 ].each { |風景|
      result[風景] = @ダンジョン[y + pos[風景][:y]][x + pos[風景][:x]]
    }
  
    result
  end
  
  
  def self.壁?(ブロック)
    壁 = [ :壁 ]
  
    壁.include?(ブロック)
  end
  

  def self.ブロック探索(ブロック)
    @ダンジョン.length.times { |y|
      @ダンジョン[y].length.times { |x|
        if @ダンジョン[y][x] == ブロック
          return [ x, y ]
        end
      }
    }
  
    raise "start not found"
  end
  
  
  def self.右を向く(向き)
    {
      :西 => :北,
      :北 => :東,
      :東 => :南,
      :南 => :西
    }[向き]
  end
  
  
  def self.左を向く(向き)
    {
      :西 => :南,
      :南 => :東,
      :東 => :北,
      :北 => :西,
    }[向き]
  end
  
  
  def self.進む(x, y, 向き)
    風景 = 辺りの風景(x, y, 向き)  
  
    if 壁?(風景[:前方])
      nil
    else
      Plugin.call :mikutter_adv_progress, :walk
      { :x => x + @辺り[向き][:前方][:x], :y => y + @辺り[向き][:前方][:y] }
    end
  end
    
  
  def self.イベント!(プレーヤー)
    ブロック = @ダンジョン[プレーヤー.y][プレーヤー.x]
  
    case ブロック
  
    # 会話イベント
    when :e1
      @ダンジョン[プレーヤー.y][プレーヤー.x] = :＿

      [
        ["ねぇマスター？私たち何か忘れてる気がしない？", "そう？"],
        ["うーん、穴に落ちた時に頭とか打ったのかな？", "痛くない？"],
        ["ケガの方は大丈夫だよ。ありがとうマスター♪", "えへへ"],
      ]

    when :e2
      @ダンジョン[プレーヤー.y][プレーヤー.x] = :＿

      [
        ["そう言えば、なんで私たちGemを探してるんだっけ？", "キレイだからじゃない？"],
        ["そうだね！すごく貴重な宝石だもんね。", "ねー"],
      ]

    when :e3
      @ダンジョン[プレーヤー.y][プレーヤー.x] = :＿

      [
        ["マスター、今って何時くらいなんだろうね。", "おなかすいた・・・"],
        ["・・・なんだろう？早く帰らないといけない気がするんだ。", "ぐうぅ・・・"],
      ]

    when :e5
      @ダンジョン[プレーヤー.y][プレーヤー.x] = :＿

      [
        ["マスター、この先で何かがキラッと光ったような？", "なんだろうね？"],
        ["見に行ってみる？", "あー・・・どうしようかなぁ？"],
      ]
   
    # スタート地点
    when :始
      @ダンジョン[プレーヤー.y][プレーヤー.x] = :＿
  
      [
        ["どすん！", "・・・"],
        ["いったーい！あんな所に穴があったなんて・・・", "ぁぁぁぁぁぁどすーーーーん！！"],
        ["きゃあ！\nマスター！大丈夫？ちゃんと生きてる！？", "すーはーすーはーいいかおり・・・"],
        ["あ、大丈夫そう。\nいつものておくれマスターだ。", "・・・"],
        ["さぁマスター。早くGemを見つけて帰らないと日が暮れちゃうよ。\nレッツゴー！", "ちぇっ"],
        ["この周りは真っ暗だから私が手を引いてあげるね。\nマスターはどっちに行きたいか教えてね。", "りょうかい"],
        [->{ Plugin.call :mikutter_adv_progress, :start }]
      ]
  
    # ゴール地点
    when :終
      if プレーヤー.アイテム.include?(:Gem)
        [
          ["あ、出口だよマスター。", "出よう出よう"],
          ["わぁ・・・夕日が奇麗だねマスター\n\n・・・きゃっ！", "どしたの？"],
          ["鳥さんがGemをくわえて行っちゃった！\nせっかく苦労して見つけたのに・・・。", "あーあ"],
          ["あれ？これは手紙？", "どれどれ？"],
          [->{ Plugin.call :mikutter_adv_progress, :good_end }],
          ["「天晴れである。今回の件を全て不問とし、汝の望みを叶えよう。テオクレス王」\n\nだって。\nよく分かんないや", "そだね"],
          ["じゃあ、そろそろ帰ろうか。お姉ちゃんも待ってるだろうし。", "帰ろ帰ろ"],
          ["[こうして、3人は末永く幸せに暮らしましたとさ。]\n\nGOOD END", nil]
        ]
      else
        [
          ["あ、出口だよマスター。", "出よう出よう"],
          ["すっかり日が暮れちゃったねマスター\n\n・・・日が暮れ？\n\n・・・日没・・・まで・・・？", "・・・？"],
          ["日没まで・・・\n\nあ、私・・・忘れて・・！？\n\nいやぁぁああぁぁぁあぁあぁぁ！！！", "？？？？？"],
          [->{ Plugin.call :mikutter_adv_progress, :bad_end }],
          ["お姉ちゃん！お姉ちゃんがぁぁぁぁ！！！！\n\n・・・日没までにGemを・・王様に・・・・・処刑\n\n・・わああああああああああああ！！！", "？？？？？？？？"],
          ["[何かを思い出したみくったーちゃんは、その場で壊れてしまいましたとさ]\n\nBAD END", nil]
        ]
      end
  
    # コンパス入手
    when :コ
      プレーヤー.アイテム << :コンパス
      @ダンジョン[プレーヤー.y][プレーヤー.x] = :＿
  
      [
        ["マスター！コンパスを見つけたよ。これで今の方角が分かるね。", "やったねv"],
        [->{ Plugin.call :mikutter_adv_progress, :compass }]
      ]
  
    # GPS入手
    when :Ｇ
      プレーヤー.アイテム << :ＧＰＳ
      @ダンジョン[プレーヤー.y][プレーヤー.x] = :＿
  
      [
        ["マスター！変な機械を見つけたよ。じーぴーえす？って何？", "うはっ！持ってこう"],
        [->{ Plugin.call :mikutter_adv_progress, :gps }],
      ]
  
    # Gem入手
    when :宝
      プレーヤー.アイテム << :Gem
      @ダンジョン[プレーヤー.y][プレーヤー.x] = :＿
  
      [
        ["見つけたーーーーーーー！！！！", "びくぅっ！！"],
        [->{ Plugin.call :mikutter_adv_progress, :gem }],
        ["Gemだよマスター！GTKのGemを見つけたよ！！", "・・・（キーン）"],
        ["目的達成だね。後は出口だけだね♪", "よし、いこう"],
      ]
  
    # 回転トラップ
    when :回
      @ダンジョン[プレーヤー.y][プレーヤー.x] = :＿
  
      プレーヤー.向き = [ :西, :東, :北, :南 ].sample
  
      [
        ["きゃー！床がぐるぐる〜〜〜！！", "のわーーーーー！"],
        [->{ Plugin.call :mikutter_adv_progress, :rotate_floor}],
        ["ふぇぇ・・・ようやく止まったけど・・・頭がクラクラするぅ・・・。", "き、気持ち悪い・・・"],
      ]
  
    else
      []
    end
  end
  
  
  def self.アイテム表示(プレーヤー)
    表示 = ""
  
    if プレーヤー.アイテム.include?(:コンパス)
      表示 += "コンパス：#{プレーヤー.向き.to_s}\n"
    end
  
    if プレーヤー.アイテム.include?(:ＧＰＳ)
      表示 += "ＧＰＳ：[#{プレーヤー.x}:#{プレーヤー.y}]\n"
    end
  
    表示
  end


  def self.マップ表示(プレーヤー)
    表示 = ""

    [-1, 0, 1].each { |yd|
      行 = ""

      [-1, 0, 1].each { |xd|
        行 += if プレーヤー.アイテム.include?(:コンパス) && yd == 0 && xd == 0        
          { :南 => "↓", :西 => "←", :北 => "↑", :東 => "→" }[プレーヤー.向き]
        else
          if 壁?(@ダンジョン[プレーヤー.y + yd][プレーヤー.x + xd])
            "■"
          else
            "　"
          end
        end
      }

      表示 += 行 + "\n"
    }

    表示
  end


  Player = Struct.new(:x, :y, :向き, :アイテム)

  def self.ゲーム
    @ゲーム ||= Fiber.new {
      @プレーヤー = Player.new
  
      (@プレーヤー.x, @プレーヤー.y) = ブロック探索(:始)
      @プレーヤー.向き = :南
      @プレーヤー.アイテム = []

      loop {
        メッセージ配列 = イベント!(@プレーヤー)
  
        メッセージ配列.each { |メッセージ|
          case メッセージ[0]
          when Proc
            メッセージ[0].call
          when String
            if メッセージ[1]
              Fiber.yield(メッセージ[0], { メッセージ[1] => :次へ })
            else
              Fiber.yield(メッセージ[0], nil)
            end
          end
        }
  
        道 = 道情報(@プレーヤー.x, @プレーヤー.y, @プレーヤー.向き)
  
        ボタン = if 道.直進可
          {"左を向く" => :左, "直進" => :直進, "右を向く" => :右}
        else 
          {"左を向く" => :左, "右を向く" => :右}
        end
  
        押されたボタン = Fiber.yield([マップ表示(@プレーヤー) + アイテム表示(@プレーヤー) + 道.メッセージ, ボタン])
   
        case 押されたボタン
        when :右
          @プレーヤー.向き = 右を向く(@プレーヤー.向き)
        when :左
          @プレーヤー.向き = 左を向く(@プレーヤー.向き)
        when :直進
          tmp = 進む(@プレーヤー.x, @プレーヤー.y, @プレーヤー.向き)
  
          if tmp
            @プレーヤー.x = tmp[:x]
            @プレーヤー.y = tmp[:y]
          end
        end
      }
    }
  end
end
